/** @typedef {import('eslint').Linter.RulesRecord} RulesRecord */
/** @typedef {import('@antfu/eslint-config').Rules} Rules */

/**
 * @param {{ quotes?: 'single' | 'double' }} [options]
 * @returns {Partial<RulesRecord & Rules>}
 */
export default ({ quotes = 'single' } = {}) => ({
  'antfu/curly': 'off',
  'antfu/if-newline': 'off',
  'antfu/top-level-function': 'off',
  'curly': ['error', 'multi-line'],
  'style/array-bracket-spacing': ['error', 'never'],
  'style/arrow-spacing': ['error', { after: true, before: true }],
  'style/block-spacing': ['error', 'always'],
  'style/brace-style': ['error', '1tbs', { allowSingleLine: true }],
  'style/comma-dangle': ['warn', {
    arrays: 'always-multiline',
    exports: 'always-multiline',
    functions: 'never',
    imports: 'always-multiline',
    objects: 'always-multiline',
  }],
  'style/comma-spacing': ['error', { after: true, before: false }],
  'style/comma-style': ['error', 'last'],
  'style/computed-property-spacing': ['error', 'never', { enforceForClassMembers: true }],
  'style/dot-location': ['error', 'property'],
  'style/eol-last': 'error',
  'style/func-call-spacing': ['error', 'never'],
  'style/generator-star-spacing': ['error', { after: true, before: true }],
  'style/key-spacing': ['error', { afterColon: true, beforeColon: false }],
  'style/keyword-spacing': ['error', { after: true, before: true }],
  'style/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
  'style/max-statements-per-line': ['error', { max: 1 }],
  'style/multiline-ternary': ['error', 'always-multiline'],
  'style/new-parens': 'error',
  'style/no-extra-parens': ['error', 'functions'],
  'style/no-floating-decimal': 'error',
  'style/no-mixed-operators': ['error', {
    allowSamePrecedence: true,
    groups: [
      ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
      ['&&', '||'],
      ['in', 'instanceof'],
    ],
  }],
  'style/no-mixed-spaces-and-tabs': 'error',
  'style/no-multi-spaces': ['error', { ignoreEOLComments: true }],
  'style/no-multiple-empty-lines': ['error', { max: 1, maxBOF: 0, maxEOF: 0 }],
  'style/no-tabs': 'error',
  'style/no-trailing-spaces': 'error',
  'style/no-whitespace-before-property': 'error',
  'style/object-curly-newline': ['error', { consistent: true, multiline: true }],
  'style/object-curly-spacing': ['error', 'always'],
  'style/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],
  'style/operator-linebreak': ['error', 'after', { overrides: { ':': 'before', '?': 'before', '|>': 'before' } }],
  'style/padded-blocks': ['error', { blocks: 'never', classes: 'never', switches: 'never' }],
  'style/quotes': ['error', quotes, { allowTemplateLiterals: false, avoidEscape: true }],
  'style/rest-spread-spacing': ['error', 'never'],
  'style/semi-spacing': ['error', { after: true, before: false }],
  'style/space-before-blocks': ['error', 'always'],
  'style/space-in-parens': ['error', 'never'],
  'style/space-infix-ops': 'error',
  'style/space-unary-ops': ['error', { nonwords: false, words: true }],
  'style/spaced-comment': ['error', 'always', {
    block: { balanced: true, exceptions: ['*'], markers: ['*package', '!', ',', ':', '::', 'flow-include'] },
    line: { markers: ['*package', '!', '/', ',', '='] },
  }],
  'style/template-curly-spacing': ['error', 'never'],
  'style/template-tag-spacing': ['error', 'never'],
  'style/type-annotation-spacing': ['error', {}],
  'style/type-generic-spacing': 'error',
  'style/type-named-tuple-spacing': 'error',
  'style/wrap-iife': ['error', 'any', { functionPrototypeMethods: true }],
  'style/yield-star-spacing': ['error', 'both'],
})
